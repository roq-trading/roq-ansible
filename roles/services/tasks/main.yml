---
- block:
    - name: find list of services
      set_fact:
        services: '{{ roq_config.services.keys() }}'
    - name: find conda packages per environment
      set_fact:
        packages: '{{ ( packages | default({}) ) | combine({ roq_config.services[item].conda.env: [roq_config.services[item].conda.package] }, recursive=true, list_merge="append") }}'
      loop: '{{ services }}'
    - name: create conda environments
      shell: '{{ user_config.conda_dir }}/bin/conda create -n {{ item.key }} -y'
      args:
        creates: '{{ user_config.conda_dir }}/envs/{{ item.key }}'
      loop: '{{ packages | dict2items }}'
    - name: install conda packages
      shell: '{{ user_config.conda_dir }}/bin/conda install --freeze-installed -y -n {{ item.key }} -c {{ roq_config.conda.envs[item.key] | join(" -c ") }} {{ item.value | unique | join(" ") }}'
      loop: '{{ packages | dict2items }}'
    - name: create systemd service files
      template:
        src: templates/systemd.service
        dest: '{{ user_config.systemd_unit_dir }}/{{ item }}.service'
        mode: 0644
        owner: '{{ "root" if systemd_scope =="system" else systemd_config.user }}'
        group: '{{ "root" if systemd_scope =="system" else systemd_config.group }}'
      with_items: '{{ services }}'
    - name: create required directories
      file:
        path: '{{ user_config.config_dir }}/services/{{ item }}'
        state: directory
        mode: 0755
        owner: '{{ systemd_config.user }}'
        group: '{{ systemd_config.group }}'
      with_items: '{{ services }}'
    - name: create flags files
      template:
        src: templates/flags.cfg
        dest: '{{ user_config.config_dir }}/services/{{ item }}/flags.cfg'
        mode: 0644
        owner: '{{ systemd_config.user }}'
        group: '{{ systemd_config.group }}'
      with_items: '{{ services }}'
    - name: create config files
      template:
        src: '{{ "templates/config.toml" if item == "service-manager" else "templates/config.toml" }}'
        dest: '{{ user_config.config_dir }}/services/{{ item }}/config.toml'
        mode: 0644
        owner: '{{ systemd_config.user }}'
        group: '{{ systemd_config.group }}'
      with_items: '{{ services }}'
    - name: create systemd start timer files
      template:
        src: templates/systemd.timer
        dest: '{{ user_config.systemd_unit_dir }}/{{ item }}.timer'
        mode: 0644
        owner: '{{ "root" if systemd_scope =="system" else systemd_config.user }}'
        group: '{{ "root" if systemd_scope =="system" else systemd_config.group }}'
      with_items: '{{ services }}'
      when: '"start" in roq_config.systemd.timers'
    - name: remove systemd start timer files
      file:
        path: '{{ user_config.systemd_unit_dir }}/{{ item }}.timer'
        state: absent
      with_items: '{{ services }}'
      when: '"start" not in roq_config.systemd.timers'
    - name: create systemd stop service files
      template:
        src: templates/systemd-stop.service
        dest: '{{ user_config.systemd_unit_dir }}/{{ item }}-stop.service'
        mode: 0644
        owner: '{{ "root" if systemd_scope =="system" else systemd_config.user }}'
        group: '{{ "root" if systemd_scope =="system" else systemd_config.group }}'
      with_items: '{{ services }}'
      when: '"stop" in roq_config.systemd.timers'
    - name: remove systemd stop service files
      file:
        path: '{{ user_config.systemd_unit_dir }}/{{ item }}-stop.service'
        state: absent
      with_items: '{{ services }}'
      when: '"stop" not in roq_config.systemd.timers'
    - name: create systemd stop timer files
      template:
        src: templates/systemd-stop.timer
        dest: '{{ user_config.systemd_unit_dir }}/{{ item }}-stop.timer'
        mode: 0644
        owner: '{{ "root" if systemd_scope =="system" else systemd_config.user }}'
        group: '{{ "root" if systemd_scope =="system" else systemd_config.group }}'
      with_items: '{{ services }}'
      when: '"stop" in roq_config.systemd.timers'
    - name: remove systemd stop timer files
      file:
        path: '{{ user_config.systemd_unit_dir }}/{{ item }}-stop.timer'
        state: absent
      with_items: '{{ services }}'
      when: '"stop" not in roq_config.systemd.timers'
    - name: enable/disable systemd services
      systemd:
        name: '{{ item }}.service'
        scope: '{{ systemd_scope }}'
        enabled: '{{ roq_config.systemd.services.enabled }}'
        daemon_reload: true
      with_items: '{{ services }}'
    - name: enable systemd start timers
      systemd:
        name: '{{ item }}.timer'
        scope: '{{ systemd_scope }}'
        state: started
        enabled: true
        daemon_reload: true
      with_items: '{{ services }}'
      when: '"start" in roq_config.systemd.timers'
    - name: disable systemd stop services
      systemd:
        name: '{{ item }}-stop.service'
        scope: '{{ systemd_scope }}'
        enabled: false
        daemon_reload: true
      with_items: '{{ services }}'
      when: '"stop" in roq_config.systemd.timers'
    - name: enable systemd stop timers
      systemd:
        name: '{{ item }}-stop.timer'
        scope: '{{ systemd_scope }}'
        state: started
        enabled: true
        daemon_reload: true
      with_items: '{{ services }}'
      when: '"stop" in roq_config.systemd.timers'
  become: '{{ systemd_scope == "system" }}'
  tags:
    - services
